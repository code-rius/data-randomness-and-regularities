[{"/home/coderius/Documents/git/data-randomness-and-regularities/src/app/src/index.js":"1","/home/coderius/Documents/git/data-randomness-and-regularities/src/app/src/App.js":"2","/home/coderius/Documents/git/data-randomness-and-regularities/src/app/src/components/Loader.js":"3","/home/coderius/Documents/git/data-randomness-and-regularities/src/app/src/components/Header.js":"4","/home/coderius/Documents/git/data-randomness-and-regularities/src/app/src/components/Selector.js":"5","/home/coderius/Documents/git/data-randomness-and-regularities/src/app/src/components/Image.js":"6"},{"size":145,"mtime":1607556457964,"results":"7","hashOfConfig":"8"},{"size":1023,"mtime":1608493405689,"results":"9","hashOfConfig":"8"},{"size":316,"mtime":1608491240116,"results":"10","hashOfConfig":"8"},{"size":186,"mtime":1608491240719,"results":"11","hashOfConfig":"8"},{"size":4662,"mtime":1610006290221,"results":"12","hashOfConfig":"8"},{"size":221,"mtime":1608491468510,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"jiztwj",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"/home/coderius/Documents/git/data-randomness-and-regularities/src/app/src/index.js",[],["30","31"],"/home/coderius/Documents/git/data-randomness-and-regularities/src/app/src/App.js",["32"],"import './App.scss';\nimport Selector from './components/Selector.js';\nimport Loader from './components/Loader.js'\nimport Header from './components/Header.js';\nimport Image from './components/Image.js';\n\nimport { useState, useRef, useEffect } from 'react'\n\nconst App = () => {\n  const [plotUrl, setPlotUrl] = useState('')\n  const [loading, setLoading] = useState(false)\n  const imageRef = useRef()\n  \n  const updatePlot = (url) => {\n    setPlotUrl(url)\n  }\n\n  useEffect(() => {\n    const current = loading\n    setLoading(!current)\n    console.log(\"Loading state:\\t\", loading)\n  }, [plotUrl]);\n\n  return (\n    <>\n      <Header />\n      <div className='app'>\n        <div className='wrapper'>\n          <div className=\"box\">\n            <Selector updatePlot={updatePlot} />\n          </div>\n          <div className=\"box\">\n            <h3>Recurrence plot</h3>\n            {loading ? <Loader /> : <Image imageRef={imageRef} plotUrl={plotUrl} />}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","/home/coderius/Documents/git/data-randomness-and-regularities/src/app/src/components/Loader.js",[],"/home/coderius/Documents/git/data-randomness-and-regularities/src/app/src/components/Header.js",[],"/home/coderius/Documents/git/data-randomness-and-regularities/src/app/src/components/Selector.js",["33"],"import { React, useState, useEffect } from 'react'\nimport './Selector.scss'\n\nconst fetch = require('node-fetch')\nconst querystring = require('querystring');\n\nconst Selector = ({ updatePlot }) => {\n  const [plotDatas, setPlotDatas] = useState([])\n  const [selectedID, setSelectedID] = useState({_id:''})\n  const [compareMode, setCompareMode] = useState('1')\n  const [M, setM] = useState('3')\n  const [N, setN] = useState('2')\n  const [pixelTarget, setPixelTarget] = useState('17.5')\n  const [chaotic, setChaotic] = useState('')\n  const [periodic, setPeriodic] = useState('')\n  const [trending, setTrending] = useState('')\n\n  const handleM = (event) => {\n    if (!event.target.value) {\n      setM(3)\n    } \n    setM(event.target.value)\n  }\n\n  const handleN = (event) => {\n    if (!event.target.value) {\n      setN(3)\n    }\n    setN(event.target.value)\n  }\n\n  const handlePixelTarget = (event) => {\n    if (!event.target.value) {\n      setPixelTarget(3)\n    }\n    setPixelTarget(event.target.value)\n  }\n\n  const updateClassifications = (classifications) => {\n    setChaotic(numberToPercentage(classifications.chaotic))\n    setPeriodic(numberToPercentage(classifications.periodic))\n    setTrending(numberToPercentage(classifications.trend))\n  }\n\n  const numberToPercentage = (inputNumber) => {\n    return String(Math.round(inputNumber*10000)/100)+ '%'\n  }\n\n  const handleSubmit = async () => {\n    updatePlot('')\n    const query = \"?\" + querystring.stringify({ M, N, compareMode, pixelTarget })\n\n    console.log(process.env.REACT_APP_GET_PLOT_IMAGE_URL + selectedID + query)\n    fetch(process.env.REACT_APP_GET_PLOT_IMAGE_URL + selectedID + query).then( res => {\n      return res.json()\n    }).then(json =>{\n      if (json.fileUrl){\n        const url = process.env.REACT_APP_GET_PLOT_BASE_URL + json.fileUrl + '?' + Date.now()\n        updatePlot(url)\n        updateClassifications(json.classifications)\n        console.log(json)\n      } else {\n        console.log('No plot data image received.')\n      }\n    })\n  }\n\n  useEffect(() => {\n    fetch(process.env.REACT_APP_GET_PLOT_DATA_URL)\n      .then(res => {\n        return res.json()\n      }).then(json => {\n        setPlotDatas(json)\n        setSelectedID(json[0]._id)\n      }).catch(e => {\n        console.log(e)\n      })\n  }, [])\n\n  return (\n    <div className='selector'>\n      <div className='field'>\n        <h3>Data</h3>\n        <select value={selectedID} onChange={e => { setSelectedID(e.target.value)}}>\n          {plotDatas.map((option) => (\n            <option key={option._id} value={option._id}\n            >{option.name}</option>\n          ))}\n        </select>\n      </div>\n      <div className='field'>\n        <h3>Compare mode</h3>\n        <div className='radio-split'>\n          <div className='radio-column'>\n            <label>Maximum</label><br />\n            <input type='radio'\n              checked={compareMode === '1'}\n              value='1'\n              onChange={e => { setCompareMode(e.target.value) }} />\n          </div>\n          <div className='radio-column'>\n            <label>Euclidien</label><br />\n            <input type='radio'\n              checked={compareMode === '0'}\n              value='0'\n              onChange={e => { setCompareMode(e.target.value) }} />\n          </div>\n        </div>\n      </div>\n      <div className='field multi--data'>\n        <div className='column'>\n          <h3>M</h3>\n          <input\n            type='text' \n            className='input--mini' placeholder='3'\n            onChange={handleM}\n          />\n        </div>\n        <div className='column'>\n          <h3>N</h3>\n          <input\n            type='text'\n            className='input--mini' placeholder='2'\n            onChange={handleN}\n          />\n        </div>\n        <div className='column'>\n          <h3>Target</h3>\n          \n          <input \n            type='text' \n            className='input--mini' placeholder='17'\n            onChange={handlePixelTarget}\n          />\n        </div>\n      </div>\n      <div className='field'>\n        <button className='button-submit' onClick={handleSubmit}>\n          Plot!\n        </button>\n      </div>\n      {periodic != '' && <div className='field multi--data--classification'>\n        <div className='column'>\n          <h3>Periodic</h3>\n          <h3 className='percentage'>{periodic}</h3>\n        </div>\n        <div className='column'>\n          <h3>Trending</h3>\n          <h3 className='percentage'>{trending}</h3>\n        </div>\n        <div className='column'>\n          <h3>Chaotic</h3>\n          <h3 className='percentage'>{chaotic}</h3>\n        </div>\n        </div>}\n    </div>\n  )\n}\n\nexport default Selector","/home/coderius/Documents/git/data-randomness-and-regularities/src/app/src/components/Image.js",[],["34","35"],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":22,"column":6,"nodeType":"42","endLine":22,"endColumn":15,"suggestions":"43"},{"ruleId":"44","severity":1,"message":"45","line":142,"column":17,"nodeType":"46","messageId":"47","endLine":142,"endColumn":19},{"ruleId":"36","replacedBy":"48"},{"ruleId":"38","replacedBy":"49"},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loading'. Either include it or remove the dependency array.","ArrayExpression",["52"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["50"],["51"],"no-global-assign","no-unsafe-negation",{"desc":"53","fix":"54"},"Update the dependencies array to be: [loading, plotUrl]",{"range":"55","text":"56"},[580,589],"[loading, plotUrl]"]